{"version":3,"sources":["state/action-types/index.ts","state/reducers/remindersReducer.ts","state/reducers/index.ts","state/store.ts","state/action-creators/index.ts","hooks/useTypedSelector.ts","components/App.tsx","index.tsx"],"names":["ActionType","reminder","action","id","Math","random","text","dueDate","date","removeById","state","filter","reducer","reminders","cookie","localStorage","getItem","data","JSON","parse","type","ADD_REMINDER","setItem","stringify","DELETE_REMINDER","CLEAR_REMINDERS","clear","reducers","combineReducers","remindersReducer","store","createStore","composeWithDevTools","addReminder","deleteReminder","clearReminders","useTypedSelector","useSelector","App","useState","setReminder","setDate","dispatch","useDispatch","className","value","onChange","e","target","placeholder","onClick","actionCreators","map","moment","Date","fromNow","href","rel","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b4180505.chunk.js","sourcesContent":["export enum ActionType {\n  ADD_REMINDER = 'add_reminder',\n  DELETE_REMINDER = 'delete_reminder',\n  CLEAR_REMINDERS = 'clear_reminders',\n}\n","import { ActionType } from '../action-types';\nimport { Action, Reminder } from '../actions';\n\ninterface ReminderState {\n  id: number;\n  text: string;\n  dueDate: string;\n}\n\nconst reminder = (action: any) => {\n  return {\n    id: Math.random(),\n    text: action.text,\n    dueDate: action.date,\n  };\n};\n\nconst removeById = (state: any, id: number) => {\n  return state.filter((reminder: ReminderState) => reminder.id !== id);\n};\n\nconst reducer = (state: Reminder[] = [], action: Action) => {\n  let reminders = null;\n\n  let cookie = localStorage.getItem('reminders');\n  if (cookie) {\n    let data: ReminderState[] = JSON.parse(cookie);\n    state = data;\n  }\n\n  switch (action.type) {\n    case ActionType.ADD_REMINDER:\n      reminders = [...state, reminder(action)];\n      localStorage.setItem('reminders', JSON.stringify(reminders));\n      return reminders;\n    case ActionType.DELETE_REMINDER:\n      reminders = removeById(state, action.id);\n      localStorage.setItem('reminders', JSON.stringify(reminders));\n      return reminders;\n    case ActionType.CLEAR_REMINDERS:\n      localStorage.clear();\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport remindersReducer from './remindersReducer';\n\nconst reducers = combineReducers({ reminders: remindersReducer });\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;\n","import { createStore } from 'redux';\nimport reducers from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport const store = createStore(reducers, composeWithDevTools());\n","import { ActionType } from '../action-types';\nimport { Action } from '../actions';\n\nexport const addReminder = (text: string, date: string) => {\n  return {\n    type: ActionType.ADD_REMINDER,\n    text,\n    date,\n  };\n};\n\nexport const deleteReminder = (id: number) => {\n  return {\n    type: ActionType.DELETE_REMINDER,\n    id,\n  };\n};\n\nexport const clearReminders = () => {\n  return {\n    type: ActionType.CLEAR_REMINDERS,\n  };\n};\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import './App.css';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport moment from 'moment';\n\nimport { actionCreators } from '../state';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\n\nconst App: React.FC = () => {\n  const [reminder, setReminder] = useState('');\n  const [date, setDate] = useState('');\n  const dispatch = useDispatch();\n\n  const reminders = useTypedSelector((state) => state.reminders);\n\n  const onClick = () => {\n    dispatch(actionCreators.addReminder(reminder, date));\n    setReminder('');\n    setDate('');\n  };\n\n  function renderReminders() {\n    return (\n      <ul className=\"list-group col-sm-4\">\n        {reminders.map((reminder: any) => {\n          return (\n            <li key={reminder.id} className=\"list-group-item\">\n              <div className=\"list-item\">\n                <div>\n                  {reminder.text}\n                  <span className=\"badge bg-primary rounded-pill\">\n                    {moment(new Date(reminder.dueDate)).fromNow()}\n                  </span>\n                </div>\n                <div></div>\n              </div>\n              <div\n                id=\"other\"\n                className=\"list-item delete-button\"\n                onClick={() => {\n                  dispatch(actionCreators.deleteReminder(reminder.id));\n                }}\n              >\n                &#x2715;\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n  return (\n    <>\n      <br />\n      <br />\n      <h1 id=\"title\" className=\"text-center fst-italic\">\n        Reminders\n      </h1>\n      <p className=\"text-center\">Add reminders and the due date:</p>\n      <div className=\"container\">\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-md-4\">\n            <input\n              value={reminder}\n              className=\"form-control\"\n              onChange={(e) => {\n                setReminder(e.target.value);\n              }}\n              placeholder=\"I have to...\"\n            />\n            <input\n              value={date}\n              className=\"form-control\"\n              type=\"datetime-local\"\n              onChange={(e) => setDate(e.target.value)}\n            />\n            <button className=\"btn btn-success\" onClick={onClick}>\n              Add Reminder\n            </button>\n            <button\n              className=\"btn btn-danger float-end\"\n              onClick={() => dispatch(actionCreators.clearReminders())}\n            >\n              Clear Reminders\n            </button>\n          </div>\n        </div>\n        <br />\n        <div className=\"row justify-content-md-center\">{renderReminders()}</div>\n        <br />\n        <div className=\"text-center\">\n          <a\n            href=\"https://github.com/denskiz/reminders\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <button className=\"btn btn-success\">Source code on GitHub</button>\n          </a>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}